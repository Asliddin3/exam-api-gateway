basePath: /v1
definitions:
  customer.Address:
    properties:
      District:
        type: string
      Street:
        type: string
    type: object
  customer.AddressResponse:
    properties:
      District:
        type: string
      Street:
        type: string
      id:
        type: integer
    type: object
  customer.CustomerFullInfo:
    properties:
      Adderesses:
        items:
          $ref: '#/definitions/customer.AddressResponse'
        type: array
      Bio:
        type: string
      CreatedAt:
        type: string
      DeletedAt:
        type: string
      Email:
        type: string
      FirstName:
        type: string
      Id:
        type: string
      LastName:
        type: string
      PhoneNumber:
        type: string
      Posts:
        items:
          $ref: '#/definitions/customer.PostResponse'
        type: array
      Reviews:
        items:
          $ref: '#/definitions/customer.ReviewList'
        type: array
      UpdatedAt:
        type: string
    type: object
  customer.CustomerRequest:
    properties:
      Adderesses:
        items:
          $ref: '#/definitions/customer.Address'
        type: array
      Bio:
        type: string
      Email:
        type: string
      FirstName:
        type: string
      Id:
        type: string
      LastName:
        type: string
      PassWord:
        type: string
      PhoneNumber:
        type: string
      RefreshToken:
        type: string
      UserName:
        type: string
    type: object
  customer.CustomerResponse:
    properties:
      Adderesses:
        items:
          $ref: '#/definitions/customer.AddressResponse'
        type: array
      Bio:
        type: string
      CreatedAt:
        type: string
      Email:
        type: string
      FirstName:
        type: string
      Id:
        type: string
      LastName:
        type: string
      PhoneNumber:
        type: string
      UpdatedAt:
        type: string
    type: object
  customer.CustomerResponsePost:
    properties:
      Adderesses:
        items:
          $ref: '#/definitions/customer.AddressResponse'
        type: array
      Bio:
        type: string
      CreatedAt:
        type: string
      Email:
        type: string
      FirstName:
        type: string
      Id:
        type: string
      LastName:
        type: string
      PhoneNumber:
        type: string
      Post:
        items:
          $ref: '#/definitions/customer.PostResponse'
        type: array
      UpdatedAt:
        type: string
    type: object
  customer.CustomerUpdate:
    properties:
      Adderesses:
        items:
          $ref: '#/definitions/customer.AddressResponse'
        type: array
      Bio:
        type: string
      Email:
        type: string
      FirstName:
        type: string
      Id:
        type: string
      LastName:
        type: string
      PhoneNumber:
        type: string
    type: object
  customer.ListCustomers:
    properties:
      ActiveCustomers:
        items:
          $ref: '#/definitions/customer.CustomerFullInfo'
        type: array
      DeletedCustomers:
        items:
          $ref: '#/definitions/customer.CustomerFullInfo'
        type: array
    type: object
  customer.MediasResponse:
    properties:
      Id:
        type: integer
      Link:
        type: string
      Name:
        type: string
      Type:
        type: string
    type: object
  customer.PostResponse:
    properties:
      CreatedAt:
        type: string
      Description:
        type: string
      Id:
        type: integer
      Media:
        items:
          $ref: '#/definitions/customer.MediasResponse'
        type: array
      Name:
        type: string
      UpdatedAt:
        type: string
    type: object
  customer.ReviewList:
    properties:
      description:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      review:
        type: number
    type: object
  models.Address:
    properties:
      District:
        type: string
      Street:
        type: string
    type: object
  models.AdminRequest:
    properties:
      id:
        type: integer
      passWord:
        type: string
      userName:
        type: string
    type: object
  models.AdminResponse:
    properties:
      accessToken:
        type: string
      userName:
        type: string
    type: object
  models.CofirmEmail:
    properties:
      password:
        type: string
      userNameOrEmail:
        type: string
    type: object
  models.Error:
    properties:
      error:
        type: string
    type: object
  models.Login:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.LoginUser:
    properties:
      accessToken:
        type: string
      userName:
        type: string
    type: object
  models.ModeratorRequest:
    properties:
      id:
        type: integer
      passWord:
        type: string
      userName:
        type: string
    type: object
  models.ModeratorResponse:
    properties:
      accessToken:
        type: string
      userName:
        type: string
    type: object
  models.Register:
    properties:
      Adderesses:
        items:
          $ref: '#/definitions/models.Address'
        type: array
      Bio:
        type: string
      Email:
        type: string
      FirstName:
        type: string
      LastName:
        type: string
      PassWord:
        type: string
      PhoneNumber:
        type: string
      UserName:
        type: string
    type: object
  models.VerifiedResponse:
    properties:
      access_token:
        type: string
      id:
        type: string
      refresh_token:
        type: string
    type: object
  post.AddressResponse:
    properties:
      District:
        type: string
      Street:
        type: string
      id:
        type: integer
    type: object
  post.ListAllPostResponse:
    properties:
      ActivePost:
        items:
          $ref: '#/definitions/post.PostReviewResponse'
        type: array
      DeletedPost:
        items:
          $ref: '#/definitions/post.PostReviewResponse'
        type: array
    type: object
  post.MediasRequest:
    properties:
      Link:
        type: string
      Name:
        type: string
      Type:
        type: string
    type: object
  post.MediasResponse:
    properties:
      Link:
        type: string
      Name:
        type: string
      Type:
        type: string
      id:
        type: integer
    type: object
  post.PostRequest:
    properties:
      CustomerId:
        type: string
      Description:
        type: string
      Media:
        items:
          $ref: '#/definitions/post.MediasRequest'
        type: array
      Name:
        type: string
    type: object
  post.PostResponse:
    properties:
      CreatedAt:
        type: string
      CustomerId:
        type: string
      Description:
        type: string
      Id:
        type: integer
      Media:
        items:
          $ref: '#/definitions/post.MediasResponse'
        type: array
      Name:
        type: string
      UpdatedAt:
        type: string
    type: object
  post.PostResponseCustomer:
    properties:
      Bio:
        type: string
      CreatedAt:
        type: string
      CustomerId:
        type: string
      Description:
        type: string
      FirstName:
        type: string
      Id:
        type: integer
      LastName:
        type: string
      Media:
        items:
          $ref: '#/definitions/post.MediasResponse'
        type: array
      Name:
        type: string
      UpdatedAt:
        type: string
      adderesses:
        items:
          $ref: '#/definitions/post.AddressResponse'
        type: array
      email:
        type: string
      phonenumber:
        type: string
      reviews:
        items:
          $ref: '#/definitions/post.ReviewRespList'
        type: array
    type: object
  post.PostReviewResponse:
    properties:
      Count:
        type: integer
      CreatedAt:
        type: string
      CustomerId:
        type: string
      DeletedAt:
        type: string
      Description:
        type: string
      Id:
        type: integer
      Media:
        items:
          $ref: '#/definitions/post.MediasResponse'
        type: array
      Name:
        type: string
      Overall:
        type: number
      UpdatedAt:
        type: string
      reviews:
        items:
          $ref: '#/definitions/post.ReviewRespList'
        type: array
    type: object
  post.PostUpdate:
    properties:
      CustomerId:
        type: string
      Description:
        type: string
      Id:
        type: integer
      Media:
        items:
          $ref: '#/definitions/post.MediasResponse'
        type: array
      Name:
        type: string
    type: object
  post.ReviewRespList:
    properties:
      customer_id:
        type: string
      description:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      review:
        type: number
    type: object
  review.Review:
    properties:
      customer_id:
        type: string
      description:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      review:
        type: number
    type: object
  review.ReviewRequest:
    properties:
      customer_id:
        type: string
      description:
        type: string
      post_id:
        type: integer
      review:
        type: number
    type: object
host: 44.202.237.248:8070
info:
  contact:
    email: asliddinvstalim@gmail.com
    name: Asliddin
    url: https://t.me/asliddindeh
  description: This is reivew api
  termsOfService: not much usefull
  title: Review api
  version: "1.0"
paths:
  /admin:
    post:
      consumes:
      - application/json
      description: this func login admin
      parameters:
      - description: Admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AdminResponse'
      security:
      - BearerAuth: []
      summary: create customer with info
      tags:
      - Admin
  /confirm:
    post:
      consumes:
      - application/json
      parameters:
      - description: login
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/models.CofirmEmail'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.VerifiedResponse'
      summary: Register for authentication
      tags:
      - Auth
  /customer:
    post:
      consumes:
      - application/json
      description: this func create customer with
      parameters:
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/customer.CustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/customer.CustomerResponse'
      security:
      - BearerAuth: []
      summary: create customer with info
      tags:
      - customer
  /customer/{id}:
    get:
      consumes:
      - application/json
      description: this func get customer info
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.CustomerResponse'
      security:
      - BearerAuth: []
      summary: get customer info
      tags:
      - customer
  /customer/delete/{id}:
    delete:
      consumes:
      - application/json
      description: this func delete customer
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
      security:
      - BearerAuth: []
      summary: delete customer
      tags:
      - customer
  /customer/list:
    get:
      consumes:
      - application/json
      description: this func get all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.ListCustomers'
      security:
      - BearerAuth: []
      summary: get all customers
      tags:
      - customer
  /customer/post/{id}:
    get:
      consumes:
      - application/json
      description: this func get customer with post
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.CustomerResponsePost'
      security:
      - BearerAuth: []
      summary: get customer with post
      tags:
      - customer
  /customer/update:
    patch:
      consumes:
      - application/json
      description: this func update customers
      parameters:
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/customer.CustomerUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.CustomerResponse'
      security:
      - BearerAuth: []
      summary: update customers
      tags:
      - customer
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: login data
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: login
      tags:
      - Auth
  /moderator:
    post:
      consumes:
      - application/json
      description: this func login moderator
      parameters:
      - description: Moderator
        in: body
        name: moderator
        required: true
        schema:
          $ref: '#/definitions/models.ModeratorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ModeratorResponse'
      security:
      - BearerAuth: []
      summary: login moderator
      tags:
      - Admin
  /post:
    post:
      consumes:
      - application/json
      description: this func create post
      parameters:
      - description: Post
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/post.PostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post.PostResponse'
      security:
      - BearerAuth: []
      summary: create post with info
      tags:
      - post
  /post/{id}:
    get:
      consumes:
      - application/json
      description: this func get post
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostResponseCustomer'
      security:
      - BearerAuth: []
      summary: get post
      tags:
      - post
  /post/delete/{id}:
    delete:
      consumes:
      - application/json
      description: this func delete post
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
      security:
      - BearerAuth: []
      summary: delete post
      tags:
      - post
  /post/list:
    get:
      consumes:
      - application/json
      description: this func get posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.ListAllPostResponse'
      security:
      - BearerAuth: []
      summary: get posts
      tags:
      - post
  /post/search/{page}/{limit}/{parameters}/{orderby}:
    get:
      consumes:
      - application/json
      description: this func search post
      parameters:
      - description: page
        in: path
        name: page
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      - description: parameters
        in: path
        items:
          type: string
        name: parameters
        required: true
        type: array
      - description: orderby
        in: path
        name: orderby
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
      security:
      - BearerAuth: []
      summary: search post
      tags:
      - post
  /post/update:
    patch:
      consumes:
      - application/json
      description: this func update post
      parameters:
      - description: Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/post.PostUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostResponse'
      security:
      - BearerAuth: []
      summary: update post
      tags:
      - post
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: user data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/models.Register'
      produces:
      - application/json
      responses:
        "201":
          description: success
      summary: Register for authentication
      tags:
      - Auth
  /review:
    post:
      consumes:
      - application/json
      description: this func create review
      parameters:
      - description: Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/review.ReviewRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/review.Review'
      security:
      - BearerAuth: []
      summary: create review
      tags:
      - review
  /review/{id}:
    get:
      consumes:
      - application/json
      description: this func get review by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/review.Review'
      security:
      - BearerAuth: []
      summary: get review by id
      tags:
      - review
  /review/delete/{id}:
    delete:
      consumes:
      - application/json
      description: this func delete review
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
      security:
      - BearerAuth: []
      summary: delete review
      tags:
      - review
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
